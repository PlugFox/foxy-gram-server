name: Test

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
      - feature/**
      - hotfix/**
      - release/**
      - bugfix/**
      - support/**
    paths:
      - "go.mod"
      - "go.sum"
      - ".github/**.yaml"
      - ".github/**.yml"
      - "api/**.go"
      - "cmd/**.go"
      - "internal/**.go"
      - "pkg/**.go"
      - "Dockerfile"
    #paths-ignore:
    #  - docs/**

jobs:
  test:
    name: ⏳ Check code quality and run tests
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    env:
      go-version: 1.23.x

    steps:
      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go-version }}

      - name: 📦 Checkout the repo
        uses: actions/checkout@v4

      - name: 👷 Downloads the dependencies
        timeout-minutes: 5
        run: |
          go mod download

      - name: 📈 Lints all code with golangci-lint
        timeout-minutes: 5
        run: |
          go fmt ./...
          go run github.com/golangci/golangci-lint/cmd/golangci-lint run --issues-exit-code 1 --timeout 5m

      - name: 🧪 Run tests
        timeout-minutes: 5
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out -coverpkg=./... ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: 📥 Upload coverage report
        timeout-minutes: 5
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.out

      #- name: 📊 Check code coverage
      #  run: |
      #    coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
      #    echo "Code coverage is $coverage%"
      #    if [ $coverage -lt $test-threshold ]; then
      #      echo "Code coverage is below the threshold of $test-threshold%"
      #      exit 1
      #    fi

      #- name: Vulnerability check
      #  run: |
      #    go install golang.org/x/vuln/cmd/govulncheck@latest
      #    govulncheck ./...
